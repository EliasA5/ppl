(define append 
  (lambda(lst1 lst2)
      (if (empty? lst1)
          lst2
          (cons (car lst1) (append (cdr lst1) lst2))
      )    
  )
)

(define empty?
  (lambda(lst)
    (if (eq? lst '())
        #t
        #f
    )
  )
)

(define reverse 
  (lambda (lst)
        (if (empty? lst)
            lst
            (append (reverse (cdr lst)) (cons (car lst) '())))
  )
)

(define duplicate-items
   (lambda(lst dup-count)
      (if (empty? lst)
          lst
          (append (add-items '() (car lst) (car dup-count))
                  (duplicate-items (cdr lst) (cycle dup-count)))
      )    
   )
)

(define cycle
  (lambda(lst)
    (if (empty? lst)
        lst
        (append (cdr lst) (cons (car lst) '()))
    )
  )
)

(define add-items
  (lambda(lst element number)
    (if (= number 0)
            lst
           (add-items (append lst (cons element '())) element (- number 1))
    )  
  )
)

(define payment
  (lambda (n coins)
    (if (empty? coins)
        0
        (ways n (make-lists coins '()))
    )
  )
)

(define ways
  (lambda (n coins)
    (if (= n 0)
        1
        (if (< n 0)
            0
            (if (empty? coins)
                0
                (way n (cdr (car coins)) 0 (car (car coins)) (cdr coins))
            )
        )
    )
  )
)

(define way
  (lambda (n stop i ele coins)
    (if (< i stop)
        (+ (ways (- n (* i ele)) coins) (way n stop (+ 1 i) ele coins))
        (ways (- n (* i ele)) coins)
    )
  )
)

(define make-lists
  (lambda (lst1 lst2)
    (if (empty? lst1)
        lst2
        (make-lists (cdr lst1) (add-to (car lst1) lst2))
    )
  )
)

(define add-to
  (lambda (ele lst)
    (if (empty? lst)
        (cons (cons ele 1) '())
        (if (= (car (car lst)) ele)
            (append (cons (cons ele (+ 1 (cdr (car lst)) )) '()) (cdr lst))
            (append (cons (car lst) '()) (add-to ele (cdr lst)))
        )
    )
  )
)

(define remove-from
  (lambda (ele lst)
    (if (empty? lst)
        '()
        (if (not (= (car (car lst)) ele))
            (append (cons (car lst) '()) (remove-from ele (cdr lst)))
            (if (= (- (cdr (car lst)) 1) 0)
                (cdr lst)
                (append (cons (cons ele (- (cdr (car lst)) 1)) '()) (cdr lst))
            )
        )
    )
  )
)
                               
(define compose-n
  (lambda(f n)
        (if (= n 1)
            f
            (lambda(y)
              (f ((compose-n f (- n 1)) y))
            )
        )  
  )
)